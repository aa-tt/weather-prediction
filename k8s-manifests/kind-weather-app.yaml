apiVersion: v1
kind: Namespace
metadata:
  name: kind-weather-app

---
# k8s manifests consul deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul-ssm
  namespace: kind-weather-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consul-ssm
  template:
    metadata:
      labels:
        app: consul-ssm
    spec:
      containers:
      - name: consul
        image: ianunay/weather-app-ssm:v1
        ports:
        - containerPort: 8500
        - containerPort: 8600
        volumeMounts:
        - mountPath: /consul/data
          name: consul-data
      volumes:
      - name: consul-data
        hostPath:
          path: /data/consul
---
# k8s manifests consul service.yaml
apiVersion: v1
kind: Service
metadata:
  name: consul-ssm
  namespace: kind-weather-app
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8500
    targetPort: 8500
  - name: dns
    port: 8600
    targetPort: 8600
  selector:
    app: consul-ssm
---
# k8s manifests redis deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-cache-weather-prediction
  namespace: kind-weather-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-cache-weather-prediction
  template:
    metadata:
      labels:
        app: redis-cache-weather-prediction
    spec:
      containers:
      - name: redis
        image: redis:latest
        ports:
        - containerPort: 6379
        volumeMounts:
        - mountPath: /data
          name: redis-data
      volumes:
      - name: redis-data
        hostPath:
          path: /data/redis
---
# k8s manifests redis service.yaml
apiVersion: v1
kind: Service
metadata:
  name: redis-cache-weather-prediction
  namespace: kind-weather-app
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: redis-cache-weather-prediction
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  namespace: kind-weather-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      containers:
      - name: api
        image: ianunay/weather-app-api:v6
        ports:
        - containerPort: 8080
        env:
        - name: CONSUL_HTTP_ADDR
          value: "consul-ssm:8500"

---

apiVersion: v1
kind: Service
metadata:
  name: api
  namespace: kind-weather-app
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
  selector:
    app: api

---
# k8s manifests ui deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ui
  namespace: kind-weather-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ui
  template:
    metadata:
      labels:
        app: ui
    spec:
      containers:
      - name: ui
        image: ianunay/weather-app-ui:v2
        ports:
        - containerPort: 5001
---
# k8s manifests ui service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ui
  namespace: kind-weather-app
spec:
  type: NodePort
  ports:
  - port: 5001
    targetPort: 5001
    nodePort: 31001
  selector:
    app: ui
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: kind-weather-app
data:
  nginx.conf: |
    events {}
    http {
      log_format custom '$remote_addr - $remote_user [$time_local] "$request" '
      '$status $body_bytes_sent "$http_referer" '
      '"$http_user_agent" "$http_x_forwarded_for" '
      'upstream: $upstream_addr request_time: $request_time upstream_response_time: $upstream_response_time';
    
      access_log /var/log/nginx/access.log custom;
      error_log /var/log/nginx/error.log;
      
      server {
        listen 80;
        
        location /api/ {
          rewrite ^/api/(.*)$ /$1 break;
          proxy_http_version 1.1;
          proxy_cache_bypass $http_upgrade;
          
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection 'upgrade';
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          
          add_header Accept "application/json";
          
          proxy_pass http://api:8080;
        }
    
        location / {
          proxy_http_version 1.1;
          proxy_cache_bypass $http_upgrade;
          
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection 'upgrade';
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          
          proxy_pass http://ui:5001;
        }
    
        location ~* \.(eot|ttf|woff|woff2)$ {
          add_header Access-Control-Allow-Origin *;
        }
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: kind-weather-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: ianunay/weather-app-nginx:v4
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
---
apiVersion: v1
kind: Service
metadata:
  name: nginx
  namespace: kind-weather-app
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 80
    nodePort: 30080
  selector:
    app: nginx
---
# To make the kind-weather-app service accessible at http://localhost:30080, use kubectl port-forward to forward the port from local machine to the service in the cluster.
# > kubectl port-forward service/nginx 30080:80 -n kind-weather-app
# Alternatively, use kube proxy which forwards the request from local machine to the Kubernetes API server and then to the nginx service, which is a NodePort service.
# > kubectl proxy --port=8001
# http://localhost:8001/api/v1/namespaces/kind-weather-app/services/kind-weather-app-proxy/proxy/

# kube proxy is not needed in LoadBalancer (when used in cloud providers) and Ingress services.
# for local run with kind created single node kubernetes cluster, use port-forward.
apiVersion: v1
kind: Service
metadata:
  name: kind-weather-app-proxy
  namespace: kind-weather-app
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: nginx
