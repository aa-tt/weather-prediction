(base) aa@aa weather-prediction % eksctl create cluster --name weather-cluster --region us-west-2 --nodes 3
2024-12-05 15:10:02 [ℹ]  eksctl version 0.197.0
2024-12-05 15:10:02 [ℹ]  using region us-west-2
2024-12-05 15:10:03 [ℹ]  setting availability zones to [us-west-2a us-west-2b us-west-2c]
2024-12-05 15:10:03 [ℹ]  subnets for us-west-2a - public:192.168.0.0/19 private:192.168.96.0/19
2024-12-05 15:10:03 [ℹ]  subnets for us-west-2b - public:192.168.32.0/19 private:192.168.128.0/19
2024-12-05 15:10:03 [ℹ]  subnets for us-west-2c - public:192.168.64.0/19 private:192.168.160.0/19
2024-12-05 15:10:03 [ℹ]  nodegroup "ng-d3c9ac6b" will use "" [AmazonLinux2/1.30]
2024-12-05 15:10:03 [ℹ]  using Kubernetes version 1.30
2024-12-05 15:10:03 [ℹ]  creating EKS cluster "weather-cluster" in "us-west-2" region with managed nodes
2024-12-05 15:10:03 [ℹ]  will create 2 separate CloudFormation stacks for cluster itself and the initial managed nodegroup
2024-12-05 15:10:03 [ℹ]  if you encounter any issues, check CloudFormation console or try 'eksctl utils describe-stacks --region=us-west-2 --cluster=weather-cluster'
2024-12-05 15:10:03 [ℹ]  Kubernetes API endpoint access will use default of {publicAccess=true, privateAccess=false} for cluster "weather-cluster" in "us-west-2"
2024-12-05 15:10:03 [ℹ]  CloudWatch logging will not be enabled for cluster "weather-cluster" in "us-west-2"
2024-12-05 15:10:03 [ℹ]  you can enable it with 'eksctl utils update-cluster-logging --enable-types={SPECIFY-YOUR-LOG-TYPES-HERE (e.g. all)} --region=us-west-2 --cluster=weather-cluster'
2024-12-05 15:10:03 [ℹ]  default addons vpc-cni, kube-proxy, coredns were not specified, will install them as EKS addons
2024-12-05 15:10:03 [ℹ]  
2 sequential tasks: { create cluster control plane "weather-cluster", 
    2 sequential sub-tasks: { 
        2 sequential sub-tasks: { 
            1 task: { create addons },
            wait for control plane to become ready,
        },
        create managed nodegroup "ng-d3c9ac6b",
    } 
}
2024-12-05 15:10:03 [ℹ]  building cluster stack "eksctl-weather-cluster-cluster"
2024-12-05 15:10:06 [ℹ]  deploying stack "eksctl-weather-cluster-cluster"
2024-12-05 15:10:36 [ℹ]  waiting for CloudFormation stack "eksctl-weather-cluster-cluster"
2024-12-05 15:11:07 [ℹ]  waiting for CloudFormation stack "eksctl-weather-cluster-cluster"
2024-12-05 15:12:08 [ℹ]  waiting for CloudFormation stack "eksctl-weather-cluster-cluster"
2024-12-05 15:13:09 [ℹ]  waiting for CloudFormation stack "eksctl-weather-cluster-cluster"
2024-12-05 15:14:10 [ℹ]  waiting for CloudFormation stack "eksctl-weather-cluster-cluster"
2024-12-05 15:15:11 [ℹ]  waiting for CloudFormation stack "eksctl-weather-cluster-cluster"
2024-12-05 15:16:12 [ℹ]  waiting for CloudFormation stack "eksctl-weather-cluster-cluster"
2024-12-05 15:17:13 [ℹ]  waiting for CloudFormation stack "eksctl-weather-cluster-cluster"
2024-12-05 15:18:14 [ℹ]  waiting for CloudFormation stack "eksctl-weather-cluster-cluster"
2024-12-05 15:19:15 [ℹ]  waiting for CloudFormation stack "eksctl-weather-cluster-cluster"
2024-12-05 15:19:20 [!]  recommended policies were found for "vpc-cni" addon, but since OIDC is disabled on the cluster, eksctl cannot configure the requested permissions; the recommended way to provide IAM permissions for "vpc-cni" addon is via pod identity associations; after addon creation is completed, add all recommended policies to the config file, under `addon.PodIdentityAssociations`, and run `eksctl update addon`
2024-12-05 15:19:20 [ℹ]  creating addon
2024-12-05 15:19:20 [ℹ]  successfully created addon
2024-12-05 15:19:21 [ℹ]  creating addon
2024-12-05 15:19:22 [ℹ]  successfully created addon
2024-12-05 15:19:22 [ℹ]  creating addon
2024-12-05 15:19:23 [ℹ]  successfully created addon
2024-12-05 15:21:28 [ℹ]  building managed nodegroup stack "eksctl-weather-cluster-nodegroup-ng-d3c9ac6b"
2024-12-05 15:21:31 [ℹ]  deploying stack "eksctl-weather-cluster-nodegroup-ng-d3c9ac6b"
2024-12-05 15:21:31 [ℹ]  waiting for CloudFormation stack "eksctl-weather-cluster-nodegroup-ng-d3c9ac6b"
2024-12-05 15:22:03 [ℹ]  waiting for CloudFormation stack "eksctl-weather-cluster-nodegroup-ng-d3c9ac6b"
2024-12-05 15:22:47 [ℹ]  waiting for CloudFormation stack "eksctl-weather-cluster-nodegroup-ng-d3c9ac6b"
2024-12-05 15:24:27 [ℹ]  waiting for CloudFormation stack "eksctl-weather-cluster-nodegroup-ng-d3c9ac6b"
2024-12-05 15:24:27 [ℹ]  waiting for the control plane to become ready
2024-12-05 15:24:29 [✔]  saved kubeconfig as "/Users/aa/.kube/config"
2024-12-05 15:24:29 [ℹ]  no tasks
2024-12-05 15:24:29 [✔]  all EKS cluster resources for "weather-cluster" have been created
2024-12-05 15:24:31 [ℹ]  nodegroup "ng-d3c9ac6b" has 3 node(s)
2024-12-05 15:24:31 [ℹ]  node "ip-192-168-10-21.us-west-2.compute.internal" is ready
2024-12-05 15:24:31 [ℹ]  node "ip-192-168-62-148.us-west-2.compute.internal" is ready
2024-12-05 15:24:31 [ℹ]  node "ip-192-168-82-181.us-west-2.compute.internal" is ready
2024-12-05 15:24:31 [ℹ]  waiting for at least 3 node(s) to become ready in "ng-d3c9ac6b"
2024-12-05 15:24:31 [ℹ]  nodegroup "ng-d3c9ac6b" has 3 node(s)
2024-12-05 15:24:31 [ℹ]  node "ip-192-168-10-21.us-west-2.compute.internal" is ready
2024-12-05 15:24:31 [ℹ]  node "ip-192-168-62-148.us-west-2.compute.internal" is ready
2024-12-05 15:24:31 [ℹ]  node "ip-192-168-82-181.us-west-2.compute.internal" is ready
2024-12-05 15:24:31 [✔]  created 1 managed nodegroup(s) in cluster "weather-cluster"
2024-12-05 15:24:33 [ℹ]  kubectl command should work with "/Users/aa/.kube/config", try 'kubectl get nodes'
2024-12-05 15:24:33 [✔]  EKS cluster "weather-cluster" in "us-west-2" region is ready

(base) aa@aa weather-prediction % kubectl get nodes
NAME                                           STATUS   ROLES    AGE   VERSION
ip-192-168-10-21.us-west-2.compute.internal    Ready    <none>   90s   v1.30.6-eks-94953ac
ip-192-168-62-148.us-west-2.compute.internal   Ready    <none>   90s   v1.30.6-eks-94953ac
ip-192-168-82-181.us-west-2.compute.internal   Ready    <none>   97s   v1.30.6-eks-94953ac

(base) aa@aa eks % kubectl apply -f consul-deployment.yaml 
deployment.apps/consul-ssm unchanged
service/consul-ssm created
(base) aa@aa eks % kubectl apply -f redis-deployment.yaml  
deployment.apps/redis-cache-weather-prediction created
service/redis-cache-weather-prediction created
(base) aa@aa eks % kubectl apply -f api-deployment.yaml  
deployment.apps/api created
service/api created
service/redis-cache-weather-prediction created
(base) aa@aa eks % kubectl apply -f ui-deployment.yaml  
deployment.apps/ui created
service/ui created
(base) aa@aa eks % kubectl create configmap nginx-config --from-file=../nginx/nginx-release.conf
configmap/nginx-config created
(base) aa@aa eks % kubectl apply -f nginx-deployment.yaml  
deployment.apps/nginx created
service/nginx created
(base) aa@aa eks % kubectl get deployments                                      
NAME                             READY   UP-TO-DATE   AVAILABLE   AGE
api                              0/1     1            0           4m27s
consul-ssm                       1/1     1            1           39m
nginx                            1/1     1            1           77s
redis-cache-weather-prediction   1/1     1            1           4m42s
ui                               1/1     1            1           93s
(base) aa@aa eks % kubectl logs api-cc5cff489-gqmzm       

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.0.2)

2024-12-05T14:25:34.255Z ERROR 1 --- [           main] o.s.boot.SpringApplication               : Application run failed

org.springframework.cloud.consul.config.ConsulPropertySources$PropertySourceNotFoundException: com.ecwid.consul.transport.TransportException: java.net.UnknownHostException: consul_ssm: Name does not resolve
	at org.springframework.cloud.consul.config.ConsulPropertySources.createPropertySource(ConsulPropertySources.java:143) ~[spring-cloud-consul-config-4.0.1.jar!/:4.0.1]
	at org.springframework.cloud.consul.config.ConsulPropertySourceLocator.locate(ConsulPropertySourceLocator.java:88) ~[spring-cloud-consul-config-4.0.1.jar!/:4.0.1]
	at org.springframework.cloud.bootstrap.config.PropertySourceLocator.locateCollection(PropertySourceLocator.java:50) ~[spring-cloud-context-4.0.1.jar!/:4.0.1]
	at org.springframework.cloud.consul.config.ConsulPropertySourceLocator.locateCollection(ConsulPropertySourceLocator.java:71) ~[spring-cloud-consul-config-4.0.1.jar!/:4.0.1]
	at org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration.initialize(PropertySourceBootstrapConfiguration.java:95) ~[spring-cloud-context-4.0.1.jar!/:4.0.1]
	at org.springframework.boot.SpringApplication.applyInitializers(SpringApplication.java:603) ~[spring-boot-3.0.2.jar!/:3.0.2]
	at org.springframework.boot.SpringApplication.prepareContext(SpringApplication.java:383) ~[spring-boot-3.0.2.jar!/:3.0.2]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:307) ~[spring-boot-3.0.2.jar!/:3.0.2]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1302) ~[spring-boot-3.0.2.jar!/:3.0.2]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1291) ~[spring-boot-3.0.2.jar!/:3.0.2]
	at com.aa.weatherprediction.WeatherPredictionApplicationKt.main(WeatherPredictionApplication.kt:15) ~[classes!/:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[na:na]
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:49) ~[weather-prediction-0.0.1-SNAPSHOT.jar:na]
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:95) ~[weather-prediction-0.0.1-SNAPSHOT.jar:na]
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:58) ~[weather-prediction-0.0.1-SNAPSHOT.jar:na]
	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:65) ~[weather-prediction-0.0.1-SNAPSHOT.jar:na]
Caused by: com.ecwid.consul.transport.TransportException: java.net.UnknownHostException: consul_ssm: Name does not resolve
	at com.ecwid.consul.transport.AbstractHttpTransport.executeRequest(AbstractHttpTransport.java:83) ~[consul-api-1.4.5.jar!/:na]
	at com.ecwid.consul.transport.AbstractHttpTransport.makeGetRequest(AbstractHttpTransport.java:36) ~[consul-api-1.4.5.jar!/:na]
	at com.ecwid.consul.v1.ConsulRawClient.makeGetRequest(ConsulRawClient.java:139) ~[consul-api-1.4.5.jar!/:na]
	at com.ecwid.consul.v1.ConsulRawClient.makeGetRequest(ConsulRawClient.java:128) ~[consul-api-1.4.5.jar!/:na]
	at com.ecwid.consul.v1.kv.KeyValueConsulClient.getKVValues(KeyValueConsulClient.java:147) ~[consul-api-1.4.5.jar!/:na]
	at com.ecwid.consul.v1.ConsulClient.getKVValues(ConsulClient.java:644) ~[consul-api-1.4.5.jar!/:na]
	at org.springframework.cloud.consul.config.ConsulPropertySource.init(ConsulPropertySource.java:70) ~[spring-cloud-consul-config-4.0.1.jar!/:4.0.1]
	at org.springframework.cloud.consul.config.ConsulPropertySources.create(ConsulPropertySources.java:155) ~[spring-cloud-consul-config-4.0.1.jar!/:4.0.1]
	at org.springframework.cloud.consul.config.ConsulPropertySources.createPropertySource(ConsulPropertySources.java:134) ~[spring-cloud-consul-config-4.0.1.jar!/:4.0.1]
	... 18 common frames omitted
Caused by: java.net.UnknownHostException: consul_ssm: Name does not resolve
	at java.base/java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method) ~[na:na]
(base) aa@aa eks % kubectl get services
NAME                             TYPE           CLUSTER-IP       EXTERNAL-IP                                                              PORT(S)             AGE
api                              ClusterIP      10.100.46.80     <none>                                                                   8080/TCP            43m
consul-ssm                       ClusterIP      10.100.193.104   <none>                                                                   8500/TCP,8600/TCP   54m
kubernetes                       ClusterIP      10.100.0.1       <none>                                                                   443/TCP             5h6m
nginx                            LoadBalancer   10.100.165.124   aa965d51101ef47cea19ddaaa8c2e025-392334644.us-west-2.elb.amazonaws.com   80:31223/TCP        40m
redis-cache-weather-prediction   ClusterIP      10.100.138.159   <none>                                                                   6379/TCP            44m
ui                               LoadBalancer   10.100.184.97    abda01443dc894e3db95b5d241cf70f0-393947037.us-west-2.elb.amazonaws.com   5001:31622/TCP      40m

(base) aa@aa eks % for node in $(kubectl get nodes -o name); do kubectl drain $node --ignore-daemonsets --delete-local-data; done
Flag --delete-local-data has been deprecated, This option is deprecated and will be deleted. Use --delete-emptydir-data.
node/ip-192-168-10-21.us-west-2.compute.internal cordoned
Warning: ignoring DaemonSet-managed Pods: kube-system/aws-node-skzh4, kube-system/kube-proxy-zpbt9
evicting pod default/ui-599478d688-5v97w
evicting pod default/consul-ssm-5984c6cd49-9bv6q
evicting pod default/api-5d46bf5b77-2ggdc
pod/api-5d46bf5b77-2ggdc evicted
pod/ui-599478d688-5v97w evicted
pod/consul-ssm-5984c6cd49-9bv6q evicted
node/ip-192-168-10-21.us-west-2.compute.internal drained
Flag --delete-local-data has been deprecated, This option is deprecated and will be deleted. Use --delete-emptydir-data.
node/ip-192-168-62-148.us-west-2.compute.internal cordoned
Warning: ignoring DaemonSet-managed Pods: kube-system/aws-node-rwbrk, kube-system/kube-proxy-49cd9
evicting pod default/ui-599478d688-kvhfh
evicting pod default/redis-cache-weather-prediction-7974c6658d-b5rfq
evicting pod default/nginx-8d4978566-m4pfk
evicting pod default/consul-ssm-5984c6cd49-smgdr
pod/nginx-8d4978566-m4pfk evicted
pod/redis-cache-weather-prediction-7974c6658d-b5rfq evicted
pod/consul-ssm-5984c6cd49-smgdr evicted
pod/ui-599478d688-kvhfh evicted
node/ip-192-168-62-148.us-west-2.compute.internal drained
Flag --delete-local-data has been deprecated, This option is deprecated and will be deleted. Use --delete-emptydir-data.
node/ip-192-168-82-181.us-west-2.compute.internal cordoned
Warning: ignoring DaemonSet-managed Pods: kube-system/aws-node-wt6lj, kube-system/kube-proxy-x2rx8
evicting pod kube-system/coredns-787cb67946-jk8jq
evicting pod default/nginx-8d4978566-xxg2l
evicting pod default/ui-599478d688-dh55x
evicting pod default/api-5d46bf5b77-hgwqf
evicting pod default/redis-cache-weather-prediction-7974c6658d-n99w5
evicting pod kube-system/coredns-787cb67946-2q5mq
evicting pod default/consul-ssm-5984c6cd49-7t8mq
error when evicting pods/"coredns-787cb67946-jk8jq" -n "kube-system" (will retry after 5s): Cannot evict pod as it would violate the pod's disruption budget.
pod/nginx-8d4978566-xxg2l evicted
pod/api-5d46bf5b77-hgwqf evicted
pod/consul-ssm-5984c6cd49-7t8mq evicted
pod/redis-cache-weather-prediction-7974c6658d-n99w5 evicted
evicting pod kube-system/coredns-787cb67946-jk8jq
error when evicting pods/"coredns-787cb67946-jk8jq" -n "kube-system" (will retry after 5s): Cannot evict pod as it would violate the pod's disruption budget.
pod/coredns-787cb67946-2q5mq evicted
evicting pod kube-system/coredns-787cb67946-jk8jq
error when evicting pods/"coredns-787cb67946-jk8jq" -n "kube-system" (will retry after 5s): Cannot evict pod as it would violate the pod's disruption budget.
pod/ui-599478d688-dh55x evicted

(base) aa@aa eks % for node in $(kubectl get nodes -o name); do kubectl delete $node; done
node "ip-192-168-10-21.us-west-2.compute.internal" deleted
node "ip-192-168-62-148.us-west-2.compute.internal" deleted
node "ip-192-168-82-181.us-west-2.compute.internal" deleted